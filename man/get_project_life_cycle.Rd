% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/project_life_cycle.R
\name{get_project_life_cycle}
\alias{get_project_life_cycle}
\title{get_project_life_cycle}
\usage{
get_project_life_cycle(
  rc_conn,
  start_date = as.Date(NA),
  cache_file = NA_character_,
  read_cache = TRUE
)
}
\arguments{
\item{rc_conn}{- a DBI connection to a REDCap database}

\item{start_date}{- an optional minimum date for query results}

\item{cache_file}{- an optional path to the cache_file. Defaults to NA.}

\item{read_cache}{- a boolean to indicate if the cache should be read. Defaults to TRUE}
}
\value{
- a dataframe of redcap_log_event rows with added columns `log_event_table` (an index) and `event_date`
}
\description{
get_project_life_cycle runs speedy queries against the REDCap log event
tables to get all of the events in the life cycle of every project on
the system.
}
\details{
The redcap_log_event table is among the largest redcap tables. In the test
instance where this script was developed, it had 2.2m rows The production system
had 29m rows in the corresponding redcap_data table. A row count in the
millions is completely normal. Fortunately, project history is easy to
extract by querying for a specific of list descriptions and that field is
indexed.

All that said, the query for the large list of descriptions is very slow.
A much faster query is to query for `object_type == "redcap_projects"`.
What's more, this query can then be filtered by `ts >= start_date`` to make
it even faster and to allow incremental queries. This comes at a small
cost because these descriptions are not are not included when searching for
`object_type == "redcap_projects"`:

\itemize{
  \item Create project (API)
  \item Create project folder
  \item Delete project bookmark
  \item Send request to copy project
  \item Send request to create project
  \item Send request to delete project
  \item Send request to move project to production status
}

Among other things, their loss means we cannot tell who requested things or
when they requested it.

Deletion Events Notes

Every project deletion is composed of multiple events. The simplest event
is a deletion by a user followed by a permanent deletion by the system via
a cron job 30 days later. While admins can always do this, users are only
allowed to delete non-production projects. For production projects, users
must submit a request to delete.  An admin then deletes the project.  30
days later the system will permanently delete the project via a cron job.
As a project can be undeleted before the permanent deletion and/or changes
status, the above sequences can have sub-loops and intermingle.

To address who wanted a project deleted and got it done, one must find the
last "Send request to delete project" or "Delete project" event to get the
username and the "Permanently delete project" event to verify the deletion.
If both a request and a delete event precede the "Permanently delete
project" event, the username on the request should be consider the
deleter. The admin who executed the task is just the custodian.
}
\examples{
\dontrun{
project_life_cycle <- get_project_life_cycle(rc_conn = rc_conn, read_cache = TRUE)
}
}
